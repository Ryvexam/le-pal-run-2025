import streamlit as st
import requests
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional
from fetch_data import fetch_results
# Configuration de la page
st.set_page_config(
    layout="wide",
    page_title="Analyse des R√©sultats de Course",
    page_icon="üèÉ"
)

# Constantes
CACHE_FILE = "race_data.json"
MIN_PARTICIPANTS_FOR_STATS = 5
API_TIMEOUT = 10  # secondes


def format_timedelta(td: timedelta) -> str:
    """Formater un timedelta en HH:MM:SS"""
    total_seconds = td.total_seconds()
    hours = int(total_seconds // 3600)
    minutes = int((total_seconds % 3600) // 60)
    seconds = int(total_seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def process_results(data: Dict[str, Any]) -> pd.DataFrame:
    """Traiter les r√©sultats et cr√©er un DataFrame"""
    try:
        results = data['data']['results']
        df = pd.DataFrame([
            {
                'id': r['id'],
                'time': r['time'],
                'ranking': r['ranking'],
                'gender_ranking': r['gender_ranking'],
                'category_ranking': r['category_ranking'],
                'firstname': r['participant']['firstname'],
                'lastname': r['participant']['lastname'],
                'gender': r['participant']['gender'],
                'category': r['participant']['category'],
                'country': r['participant']['country'],
                'club': 'Sans club' if not r['participant']['club'] or r['participant']['club'] == '-' else r['participant']['club'],
                'bib_number': r['participant']['bib_number'],
                'birthdate': r['participant']['birthdate']
            }
            for r in results
        ])
        
        # Convertir le temps en timedelta pour l'analyse
        df['time_timedelta'] = pd.to_timedelta(df['time'])
        
        # Exclure les temps de 00:00:00
        df = df[df['time_timedelta'] > pd.Timedelta(seconds=0)]
        
        # Calculer l'√¢ge et la cat√©gorie
        df['age'] = pd.to_datetime('now').year - pd.to_datetime(df['birthdate']).dt.year
        df['category_detailed'] = df['birthdate'].apply(determine_category)
        
        return df
    except Exception as e:
        st.error(f"Erreur lors du traitement des donn√©es: {str(e)}")
        return pd.DataFrame()

def determine_category(birthdate: str) -> str:
    """D√©terminer la cat√©gorie en fonction de la date de naissance"""
    if not birthdate:
        return "Inconnu"
    
    try:
        birth_year = pd.to_datetime(birthdate).year
        current_year = datetime.now().year
        age = current_year - birth_year
        
        if birth_year >= 2019:
            return "Baby Athl√© (BB)"
        elif 2016 <= birth_year <= 2018:
            return "√âveil Athl√©tique (EA)"
        elif 2014 <= birth_year <= 2015:
            return "Poussins (PO)"
        elif 2012 <= birth_year <= 2013:
            return "Benjamins (BE)"
        elif 2010 <= birth_year <= 2011:
            return "Minimes (MI)"
        elif 2008 <= birth_year <= 2009:
            return "Cadets (CA)"
        elif 2006 <= birth_year <= 2007:
            return "Juniors (JU)"
        elif 2003 <= birth_year <= 2005:
            return "Espoirs (ES)"
        elif 1991 <= birth_year <= 2002:
            return "Seniors (SE)"
        else:
            # Calcul des cat√©gories Masters
            if birth_year >= 1990:
                return "Masters M0"
            elif 1986 <= birth_year <= 1989:
                return "Masters M0"
            elif 1981 <= birth_year <= 1985:
                return "Masters M1"
            elif 1976 <= birth_year <= 1980:
                return "Masters M2"
            elif 1971 <= birth_year <= 1975:
                return "Masters M3"
            elif 1966 <= birth_year <= 1970:
                return "Masters M4"
            elif 1961 <= birth_year <= 1965:
                return "Masters M5"
            elif 1956 <= birth_year <= 1960:
                return "Masters M6"
            elif 1951 <= birth_year <= 1955:
                return "Masters M7"
            elif 1946 <= birth_year <= 1950:
                return "Masters M8"
            elif 1941 <= birth_year <= 1945:
                return "Masters M9"
            else:
                return "Masters M10"
    except Exception:
        return "Inconnu"

def main():
    # En-t√™te
    st.title("üèÉ Analyse des R√©sultats de Course")
    
    # R√©cup√©rer les donn√©es
    data = fetch_results()
    df = process_results(data)
    
    if df.empty:
        st.error("Aucune donn√©e disponible pour l'analyse.")
        return
    
    # Filtres
    st.subheader("Filtres")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        selected_gender = st.multiselect(
            "Genre",
            options=df['gender'].unique(),
            default=df['gender'].unique(),
            help="S√©lectionnez un ou plusieurs genres"
        )
    
    with col2:
        selected_category = st.multiselect(
            "Cat√©gorie",
            options=df['category_detailed'].unique(),
            default=df['category_detailed'].unique(),
            help="S√©lectionnez une ou plusieurs cat√©gories"
        )
    
    with col3:
        selected_club = st.multiselect(
            "Club",
            options=df['club'].unique(),
            default=df['club'].unique(),
            help="S√©lectionnez un ou plusieurs clubs"
        )
    
    # Appliquer les filtres
    filtered_df = df[
        (df['gender'].isin(selected_gender)) & 
        (df['category_detailed'].isin(selected_category)) &
        (df['club'].isin(selected_club))
    ]
    
    # Statistiques g√©n√©rales
    st.subheader("üìä Statistiques G√©n√©rales")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Total des Participants", len(filtered_df))
    with col2:
        st.metric("Cat√©gories", filtered_df['category_detailed'].nunique())
    with col3:
        st.metric("Pays", filtered_df['country'].nunique())
    with col4:
        st.metric("Clubs", filtered_df['club'].nunique())
    
    # Statistiques par √¢ge
    st.subheader("üìä Statistiques par √Çge")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("√Çge Moyen", f"{filtered_df['age'].mean():.1f} ans")
    with col2:
        st.metric("√Çge Minimum", f"{filtered_df['age'].min()} ans")
    with col3:
        st.metric("√Çge Maximum", f"{filtered_df['age'].max()} ans")
    
    # Distribution des √¢ges
    st.subheader("üìà Distribution des √Çges")
    fig_age = px.histogram(
        filtered_df,
        x='age',
        nbins=50,
        title="Distribution des √Çges des Participants",
        labels={'age': '√Çge', 'count': 'Nombre de Participants'}
    )
    st.plotly_chart(fig_age, use_container_width=True)
    
    # Distribution des cat√©gories
    st.subheader("üèÜ Distribution des Cat√©gories")
    category_counts = filtered_df['category_detailed'].value_counts()
    fig_category = px.bar(
        x=category_counts.index,
        y=category_counts.values,
        title="Nombre de Participants par Cat√©gorie",
        labels={'x': 'Cat√©gorie', 'y': 'Nombre de Participants'}
    )
    fig_category.update_layout(xaxis_tickangle=45)
    st.plotly_chart(fig_category, use_container_width=True)
    
    # Performance par cat√©gorie d'√¢ge
    st.subheader("‚è±Ô∏è Performance par Cat√©gorie d'√Çge")
    age_category_perf = filtered_df.groupby('category_detailed').agg({
        'time_timedelta': ['count', 'mean', 'median'],
        'id': 'count'
    }).reset_index()
    age_category_perf.columns = ['Cat√©gorie', 'Participants', 'Temps Moyen', 'Temps M√©dian', 'id']
    age_category_perf = age_category_perf[age_category_perf['Participants'] >= MIN_PARTICIPANTS_FOR_STATS]
    age_category_perf['Temps Moyen'] = age_category_perf['Temps Moyen'].apply(format_timedelta)
    age_category_perf['Temps M√©dian'] = age_category_perf['Temps M√©dian'].apply(format_timedelta)
    age_category_perf['time_seconds'] = age_category_perf['Temps Moyen'].apply(lambda x: pd.Timedelta(x).total_seconds())
    
    fig_age_perf = px.line(
        age_category_perf,
        x='Cat√©gorie',
        y='time_seconds',
        title=f"Temps Moyen par Cat√©gorie d'√Çge (min. {MIN_PARTICIPANTS_FOR_STATS} participants)",
        markers=True,
        labels={'time_seconds': 'Temps Moyen', 'Cat√©gorie': 'Cat√©gorie'},
        custom_data=['Temps Moyen', 'Temps M√©dian']
    )
    fig_age_perf.update_traces(
        hovertemplate="<br>".join([
            "Cat√©gorie: %{x}",
            "Temps Moyen: %{customdata[0]}",
            "Temps M√©dian: %{customdata[1]}",
            "Nombre de Participants: %{customdata[2]}"
        ])
    )
    fig_age_perf.update_layout(xaxis_tickangle=45)
    st.plotly_chart(fig_age_perf, use_container_width=True)
    
    # D√©tail des performances par cat√©gorie
    st.subheader("üìä D√©tail des Performances par Cat√©gorie")
    age_category_stats = filtered_df.groupby('category_detailed').agg({
        'time_timedelta': ['count', 'mean', 'median', 'min', 'max'],
        'age': 'mean'
    }).reset_index()
    age_category_stats.columns = ['Cat√©gorie', 'Participants', 'Temps Moyen', 'Temps M√©dian', 'Meilleur Temps', 'Temps Max', '√Çge Moyen']
    age_category_stats = age_category_stats[age_category_stats['Participants'] >= MIN_PARTICIPANTS_FOR_STATS]
    age_category_stats['Temps Moyen'] = age_category_stats['Temps Moyen'].apply(format_timedelta)
    age_category_stats['Temps M√©dian'] = age_category_stats['Temps M√©dian'].apply(format_timedelta)
    age_category_stats['Meilleur Temps'] = age_category_stats['Meilleur Temps'].apply(format_timedelta)
    age_category_stats['Temps Max'] = age_category_stats['Temps Max'].apply(format_timedelta)
    age_category_stats['√Çge Moyen'] = age_category_stats['√Çge Moyen'].round(1)
    
    st.dataframe(
        age_category_stats[['Cat√©gorie', 'Participants', '√Çge Moyen', 'Temps Moyen', 'Temps M√©dian', 'Meilleur Temps', 'Temps Max']],
        use_container_width=True
    )
    
    # Meilleurs performeurs
    st.subheader("üèÖ Meilleurs Performeurs")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("Top 10 G√©n√©ral")
        top_10 = filtered_df.nsmallest(10, 'time_timedelta')
        top_10['time'] = top_10['time_timedelta'].apply(format_timedelta)
        st.dataframe(
            top_10[['firstname', 'lastname', 'time', 'category_detailed', 'country', 'club']],
            use_container_width=True
        )
    
    with col2:
        st.write("Meilleur par Cat√©gorie")
        top_by_category = filtered_df.groupby('category_detailed').apply(
            lambda x: x.nsmallest(1, 'time_timedelta')
        ).reset_index(drop=True)
        top_by_category['time'] = top_by_category['time_timedelta'].apply(format_timedelta)
        st.dataframe(
            top_by_category[['firstname', 'lastname', 'time', 'category_detailed', 'country', 'club']],
            use_container_width=True
        )
    
    # Performance des clubs
    st.subheader("üè¢ Performance des Clubs")
    club_stats = filtered_df.groupby('club').agg({
        'time_timedelta': ['count', 'mean', 'median', 'min'],
        'category_detailed': 'nunique'
    }).reset_index()
    club_stats.columns = ['Club', 'Participants', 'Temps Moyen', 'Temps M√©dian', 'Meilleur Temps', 'Cat√©gories']
    club_stats = club_stats[club_stats['Participants'] >= 1]
    club_stats = club_stats.sort_values('Temps Moyen')
    club_stats['Temps Moyen'] = club_stats['Temps Moyen'].apply(format_timedelta)
    club_stats['Temps M√©dian'] = club_stats['Temps M√©dian'].apply(format_timedelta)
    club_stats['Meilleur Temps'] = club_stats['Meilleur Temps'].apply(format_timedelta)
    
    # Cr√©er le podium
    col1, col2, col3 = st.columns([1, 1, 1])
    
    # Premier
    with col2:
        if len(club_stats) > 0:
            st.markdown(f"""
                <div style='text-align: center;'>
                    <h2>ü•á</h2>
                    <h3>{club_stats.iloc[0]['Club']}</h3>
                    <p>{club_stats.iloc[0]['Participants']} participants</p>
                    <p>Temps moyen: {club_stats.iloc[0]['Temps Moyen']}</p>
                    <p>Temps m√©dian: {club_stats.iloc[0]['Temps M√©dian']}</p>
                </div>
            """, unsafe_allow_html=True)
    
    # Deuxi√®me
    with col1:
        if len(club_stats) > 1:
            st.markdown(f"""
                <div style='text-align: center;'>
                    <h2>ü•à</h2>
                    <h3>{club_stats.iloc[1]['Club']}</h3>
                    <p>{club_stats.iloc[1]['Participants']} participants</p>
                    <p>Temps moyen: {club_stats.iloc[1]['Temps Moyen']}</p>
                    <p>Temps m√©dian: {club_stats.iloc[1]['Temps M√©dian']}</p>
                </div>
            """, unsafe_allow_html=True)
    
    # Troisi√®me
    with col3:
        if len(club_stats) > 2:
            st.markdown(f"""
                <div style='text-align: center;'>
                    <h2>ü•â</h2>
                    <h3>{club_stats.iloc[2]['Club']}</h3>
                    <p>{club_stats.iloc[2]['Participants']} participants</p>
                    <p>Temps moyen: {club_stats.iloc[2]['Temps Moyen']}</p>
                    <p>Temps m√©dian: {club_stats.iloc[2]['Temps M√©dian']}</p>
                </div>
            """, unsafe_allow_html=True)
    
    # Liste de tous les clubs
    st.subheader("Classement Complet des Clubs")
    st.dataframe(
        club_stats[['Club', 'Participants', 'Temps Moyen', 'Temps M√©dian', 'Meilleur Temps', 'Cat√©gories']],
        use_container_width=True
    )

if __name__ == "__main__":
    main() 